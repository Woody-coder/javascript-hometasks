// Что выведет алерт (ИЛИ)? Что выведет код ниже?

alert(null || 2 || undefined); // выведет 2, потому что || - он же "или" переходит слева направа по всем значениям и выводит первое трушное которое встретит, и дальше не парсит. Если все фолсные значения - выводит последнее впиисанное из условий.

// Что выведет алерт (ИЛИ)? Что выведет код ниже?

alert(alert(1) || 2 || alert(3)); // выведется сперва 1, потом 2 (до 3 дело не дойдет). 1 - это ложное значение (андефиндет, не определено), и оператор ИЛИ идет искать дальше слева направо. Но на 1 так же внутренний алерт вписан, который его выводит. На 2 - тру значение встречает и внутри скобок () останавливается "поиск" и выводиться 2 уже внешним алертом.

// Что выведет алерт (И)? Что выведет код ниже?

alert(1 && null && 2); // null - потому что "И" выводит первое ложное значениие и останавливается.

// Что выведет алерт (И)? Что выведет код ниже?

alert(alert(1) && alert(2)); // выведет 1 а потом андефиндет. Поииск прекратиться на алерт 1, возвратит андефиндет и выведет 1 внутренним алертом. После 1 - выведет внешний алерт тот андефиндет на котором он остановился.

// Что выведет код ниже?

alert(null || 2 && 3 || 4); // Выведет 3. Сложно было, но вроде бы вьехал в тему с помощью чата. Здесь действиия происходят в несколько пунктов. Из-за того что у "И" приоритет вычесления выше чем у "ИЛИ" оно выполняется первым (сложно оно стоит в скобках). Оно возвращает первое ложное значение или последнее истенное, а так как 2 и 3 тру, то возвращаеться последнее тру = 3. Далее пример становиться alert(null || 3 || 4), и начинается второй раунд вычесления. где остался оператор "ИЛИ" который выводит первое тру значение, а это 3. Ответ будет 3.

// Что выведет этот код (||=, &&=)? Что выведет код ниже?

let value = NaN;

value &&= 10;
value ||= 20;
value &&= 30;
value ||= 40;

alert(value); // выведет 30. Потому что сперва велью НаН, НаН &&= 10 - выводит НаН, Нан это фолс, оператор логического присваивания "И" видит фолс, и его возвращает, по этому присваивание не происходит. Далее валью НаН ||= 20, лог. присваивание "ИЛИ" встречает фолс (НаН) и присваевает ему выражение тру, то есть 20. Валью ставновится 20. Далее 20 &&= 30, оператор видит тру (20) и по этому происходит приисваиивание (30). Далее валью 30 ||= 40 - вернет 30, так как лог. порисваиваниие "ИЛИ" не будет приисвоено, потому что оператор ИЛИ встретит 30 и далее не будет уже парсить и соответственно присваивать. По этому финальный ответ 30. 